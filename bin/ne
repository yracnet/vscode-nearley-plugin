#!/usr/bin/env node
/* 
 * eg. node bin/ne-test file.ne-test  file.ne-out
 */
try {
    var nearley = require('nearley');
} catch (e) {
    console.log('Error: Ne-Test require nearley dependency.  Try running "npm install nearley".')
    process.exit(1)
}
var cp = require('child_process');
const fs = require('fs');
const opts = require('commander');
const { isTemplateMiddle } = require('typescript');


//=====================================================================

const actionBuild = (source, grammar) => {
    if (!source.endsWith('.ne')) {
        console.log('Error: Ne-Build require a file with ".ne" as source.')
        process.exit(1)
    }
    grammar = grammar ? grammar : source.replace('.ne', '.js');
    console.log('Source: ', source);
    console.log('Grammar: ', grammar);
    const output = grammar.replace('.js', '.ne-test');
    cp.execSync(`nearleyc ${source} -o ${grammar}`, { stdio: 'inherit' })
    if (!fs.existsSync(output)) {
        const config = {
            source,
            grammar,
            auto: false,
            execute: 'none',
            items: [],
            origin: 'template',
            create: new Date()
        }
        writeFile(config, output);
    }
}

const actionRun = (source, output) => {
    if (!source.endsWith('.ne-test')) {
        console.log('Error: Ne-Run require a file with ".ne-test" as source.')
        process.exit(1)
    }
    output = output ? output : source.replace('.ne-test', '.ne-out')
    console.log('Source :', source);
    console.log('Output :', output);
    try {
        const raw = fs.readFileSync(source);
        let config = JSON.parse(raw);
        config = executeConfig(config);
        //writeFile(config, output);
    } catch (error) {
        console.log('Error: ', error);
    }
}

//=====================================================================


const executeItem = (item, grammar) => {
    const parser = new nearley.Parser(grammar, { keepHistory: item.trace });
    console.log('Execute :', item.name);
    console.log('Content :', item.content);
    item.start = Date.now();
    item.status = 'success'
    try {
        parser.feed(item.content);
        item.results = parser.results
        item.traces = item.trace ? parser.table.map((column, index) => ({
            index,
            charAt: item.content[index],
            rules: column.states.map((state, stateIndex) => stateIndex + ": " + state.toString())
        })) : []
        item.output = ''
    } catch (error) {
        item.status = 'error'
        item.output = error.toString()
        item.results = []
        item.traces = []
    }
    console.log('  Status:', item.status);
    console.log('  Result:', item.results);
    console.log('  Output:', item.output);
    console.log('  Traces:', item.traces);
    item.finish = Date.now();
    item.time = item.finish - item.start;
    return item;
}

//const executeWorkerItem = (item, grammar) => {
//    return new Promise((resolve, reject) => {
//        setTimeout(() => reject(item), 1);
//        item = executeItem(item, grammar);
//        resolve(item);
//    });
//}

const executeConfig = (config) => {
    const source = require(config.grammar);
    const grammar = nearley.Grammar.fromCompiled(source)
    config.start = Date.now();
    config.items = config.items
        .map((item) => {
            if (item.id === config.execute || config.execute === 'ALL') {
                //try {
                item = executeItem(item, grammar);
                //} catch {
                //    item.status = 'error'
                //    item.output = 'Timeout execution'
                //}
            }
            return item;
        })
    config.finish = Date.now();
    config.time = config.finish - config.start;
    return config;
}

const writeFile = (object, output) => {
    const content = typeof object === 'string' ? object : JSON.stringify(object, null, 2)
    fs.writeFileSync(output, content)
}

//=====================================================================

opts.version('0.0.1', '-v, --version')

opts.command('build <source> [grammar]')
    .description('Execute command "nearleyc <source>" and generate ne-test file', {
        source: 'File ne'
    })
    .action(actionBuild)

opts.command('run <source> [output]')
    .description('Execute ne-test file with nearley', {
        source: 'File ne-test',
        output: 'File output result'
    })
    .action(actionRun)

opts.parse(process.argv);